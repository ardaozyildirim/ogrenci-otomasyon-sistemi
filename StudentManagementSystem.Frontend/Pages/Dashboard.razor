@page "/dashboard"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject StudentService StudentService
@inject TeacherService TeacherService
@inject CourseService CourseService
@inject GradeService GradeService
@inject AttendanceService AttendanceService

<PageTitle>Dashboard - Student Management System</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Dashboard</MudText>

<MudGrid>
    <MudItem xs="12" md="6" lg="3">
        <MudCard Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="Color.Primary">Students</MudText>
                <MudText Typo="Typo.h4">@studentCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" md="6" lg="3">
        <MudCard Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="Color.Secondary">Teachers</MudText>
                <MudText Typo="Typo.h4">@teacherCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" md="6" lg="3">
        <MudCard Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="Color.Tertiary">Courses</MudText>
                <MudText Typo="Typo.h4">@courseCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" md="6" lg="3">
        <MudCard Class="pa-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="Color.Info">Grades</MudText>
                <MudText Typo="Typo.h4">@gradeCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudDivider Class="my-4" />

<MudGrid>
    <MudItem xs="12" md="6">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">Recent Students</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (recentStudents?.Any() == true)
                {
                    <MudList T="StudentDto">
                        @foreach (var student in recentStudents.Take(5))
                        {
                            <MudListItem T="StudentDto">
                                <MudText>@student.User.FirstName @student.User.LastName</MudText>
                                <MudText Typo="Typo.caption">@student.StudentNumber - @student.Department</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No students found</MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" md="6">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">Recent Courses</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (recentCourses?.Any() == true)
                {
                    <MudList T="CourseDto">
                        @foreach (var course in recentCourses.Take(5))
                        {
                            <MudListItem T="CourseDto">
                                <MudText>@course.CourseName</MudText>
                                <MudText Typo="Typo.caption">@course.CourseCode - @course.Department</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No courses found</MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private int studentCount = 0;
    private int teacherCount = 0;
    private int courseCount = 0;
    private int gradeCount = 0;
    
    private List<StudentDto>? recentStudents;
    private List<CourseDto>? recentCourses;
    private List<GradeDto>? myGrades;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load counts
            var students = await StudentService.GetAllStudentsAsync(pageSize: 100);
            var teachers = await TeacherService.GetAllTeachersAsync(pageSize: 100);
            var courses = await CourseService.GetAllCoursesAsync(pageSize: 100);
            
            studentCount = students?.Count ?? 0;
            teacherCount = teachers?.Count ?? 0;
            courseCount = courses?.Count ?? 0;
            
            // Load recent data
            recentStudents = students?.Take(10).ToList();
            recentCourses = courses?.Take(10).ToList();
            
            // Load student grades if user is a student
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser?.Role == "Student")
            {
                var student = students?.FirstOrDefault(s => s.UserId == currentUser.Id);
                if (student != null)
                {
                    myGrades = await GradeService.GetStudentGradesAsync(student.Id);
                    gradeCount = myGrades?.Count ?? 0;
                }
            }
        }
        catch (Exception ex)
        {
            // Handle error silently for now
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
}
